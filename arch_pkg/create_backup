#!/bin/sh

# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO=ssh://max@iridium/ext_backup/iridium/$(hostname)

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Determine compression algorithm based on core count/system performance
if [ $(nproc) -gt 4 ];
then
    compression=zstd,16
else
    compression=lz4
fi

# Backup the most important directories into an archive named after
# the machine this script is currently running on:
borg create                                                                    \
    --verbose                                                                  \
    --filter AME                                                               \
    --list                                                                     \
    --stats                                                                    \
    --show-rc                                                                  \
    --compression $compression                                                 \
    --nobsdflags                                                               \
    --exclude-caches                                                           \
    --exclude 'sh:**/*tmp*/'                                                   \
    --exclude 'sh:**/*cache*/'                                                 \
    --exclude 'sh:**/*Cache*/'                                                 \
    --exclude 'sh:**/lost+found*/'                                             \
    --exclude 'sh:**/*Trash*/'                                                 \
    --exclude 'sh:**/*trash*/'                                                 \
    --exclude 'sh:**/.luckyBackup/'                                            \
    --exclude 'sh:**/node_modules/'                                            \
    --exclude '*.nobak'                                                        \
    --exclude '*.nobak.???'                                                    \
    --exclude 'sh:/home/**/unpack_*/'                                          \
    --exclude 'sh:/home/*/.android/avd/'                                       \
    --exclude 'sh:/home/*/.gradle/'                                            \
    --exclude 'sh:/home/*/.local/share/lutris/runners/'                        \
    --exclude 'sh:/home/*/.local/share/Steam/'                                 \
    --exclude 'sh:/home/*/.config/chrome-container.img'                        \
    --exclude 'sh:/home/*/Apps/go/src/*golang.org/'                            \
    --exclude 'sh:/home/*/Apps/go/src/github.com/'                             \
    --exclude 'sh:/home/*/Apps/go/pkg/'                                        \
    --exclude 'sh:/home/*/Development/Android/**/.gradle/'                     \
    --exclude 'sh:/home/*/Development/Android/**/build/'                       \
    --exclude 'sh:/home/*/Development/sdk/system-images/'                      \
    ::'{hostname}-{now}'                                                       \
    $HOME                                                                      \

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 2 daily, 3 weekly and 4 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune                                                                     \
    --list                                                                     \
    --prefix '{hostname}-'                                                     \
    --show-rc                                                                  \
    --keep-daily    2                                                          \
    --keep-weekly   3                                                          \
    --keep-monthly  4                                                          \

prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 1 ];
then
    info "Backup and/or Prune finished with a warning"
fi

if [ ${global_exit} -gt 1 ];
then
    info "Backup and/or Prune finished with an error"
fi

exit ${global_exit}
