#!/bin/sh
set -f

BORG_REMOTE="iridium" # Set default remote
SSH_PORT=22           # Set default port
BACKUP_OS=false

EXCLUDE_FILE=`mktemp`

EXCLUDES=(
    'sh:**/*tmp*/'
    'sh:**/*cache*/'
    'sh:**/*Cache*/'
    'sh:**/lost+found*/'
    'sh:**/*Trash*/'
    'sh:**/*trash*/'
    'sh:**/.luckyBackup/'
    'sh:**/node_modules/'
    '*.*~'
    '*.log'
    '*.nobak'
    '*.nobak.???'
)

EXCLUDES_HOME=(
    'sh:/home/**/unpack_*/'
    'sh:/home/*/.android/avd/'
    'sh:/home/*/.gradle/'
    'sh:/home/*/.local/share/lutris/runners/'
    'sh:/home/*/.local/share/Steam/'
    'sh:/home/*/.config/chrome-container.img'
    'sh:/home/*/Apps/go/src/*golang.org/'
    'sh:/home/*/Apps/go/src/github.com/'
    'sh:/home/*/Apps/go/pkg/'
    'sh:/home/*/Development/Android/**/.gradle/'
    'sh:/home/*/Development/Android/**/build/'
    'sh:/home/*/Development/sdk/system-images/'
)

EXCLUDES_OS=(
    'sh:/@/'
    'sh:/@home/'
    'sh:/dev/**'
    'sh:/home/**'
    'sh:/media/**'
    'sh:/mnt/**'
    'sh:/proc/**'
    'sh:/run/**'
    'sh:/snapshots/'
    'sh:/sys/'
    'sh:/usr/boost/'
    'sh:/var/lib/docker/'
    'sh:/var/log/**'
    'sh:/var/run/**'
)

# Parse arguments
while getopts ":r:p:o" opt; do
    case $opt in
        r)
            BORG_REMOTE=$OPTARG
            ;;
        p)
            SSH_PORT=$OPTARG
            ;;
        o)
            BACKUP_OS=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
  esac
done

# Some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Set up environment based on backup source
if [ $BACKUP_OS == true ]; then
    export BORG_REPO="ssh://$BORG_REMOTE/ext_backup/local/$(hostname)_os"
    TARGET=/
    CUR_EXCLUDES=${EXCLUDES_OS[@]}
else
    export BORG_REPO="ssh://$BORG_REMOTE/ext_backup/current/$(hostname)"
    TARGET=$HOME
    CUR_EXCLUDES=${EXCLUDES_HOME[@]}
fi

export BORG_RSH="ssh -i $HOME/.ssh/id_rsa -F $HOME/.ssh/config -p $SSH_PORT"

# Generate exclude file
for element in ${EXCLUDES[@]}; do
    echo "$element" >> $EXCLUDE_FILE
done

for element in ${CUR_EXCLUDES[@]}; do
    echo "$element" >> $EXCLUDE_FILE
done

# Determine compression algorithm based on core count/system performance
if [ $(nproc) -gt 4 ]; then
    compression=zstd,16
else
    compression=lz4
fi

# Parameters passed to borg
PARAMS=(
    create
    --verbose
    --filter AME
    --list
    --progress
    --stats
    --show-rc
    --compression $compression
    --nobsdflags
    --exclude-caches
    --exclude-from $EXCLUDE_FILE
    ::'{hostname}-{now}'
    $TARGET
)

# Start backup
if [ $BACKUP_OS == true ]; then
    sudo BORG_REPO="$BORG_REPO" BORG_RSH="$BORG_RSH" borg ${PARAMS[@]}
else
    borg ${PARAMS[@]}
fi

backup_exit=$?

rm $EXCLUDE_FILE

info "Pruning repository"

# Use the `prune` subcommand to maintain 2 daily, 3 weekly and 4 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune                                                                     \
    --list                                                                     \
    --prefix '{hostname}-'                                                     \
    --show-rc                                                                  \
    --keep-daily    2                                                          \
    --keep-weekly   3                                                          \
    --keep-monthly  4                                                          \

prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 1 ];
then
    info "Backup and/or Prune finished with a warning"
fi

if [ ${global_exit} -gt 1 ];
then
    info "Backup and/or Prune finished with an error"
fi

exit ${global_exit}
